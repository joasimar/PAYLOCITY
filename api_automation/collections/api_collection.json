{
	"info": {
		"_postman_id": "0f326696-a525-4cf1-aca7-b36d843795dc",
		"name": "QA Challenge- Master",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "370801"
	},
	"item": [
		{
			"name": "Add Employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Validate all fields\", function () {",
							"    const jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"string\");",
							"    pm.expect(jsonData).to.have.property(\"firstName\", pm.environment.get(\"firstName\"));",
							"    pm.expect(jsonData).to.have.property(\"lastName\", pm.environment.get(\"lastName\"));",
							"    pm.expect(jsonData).to.have.property(\"dependants\", parseInt(pm.environment.get(\"dependants\")));",
							"    pm.expect(jsonData).to.have.property(\"salary\").that.is.a(\"number\");",
							"    pm.expect(jsonData).to.have.property(\"gross\").that.is.a(\"number\");",
							"    pm.expect(jsonData).to.have.property(\"benefitsCost\").that.is.a(\"number\");",
							"    pm.expect(jsonData).to.have.property(\"net\").that.is.a(\"number\");",
							"});",
							"pm.test(\"Validate firstName\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"firstName\", pm.environment.get(\"firstName\"));",
							"});",
							"pm.test(\"Validate lastName\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"lastName\", pm.environment.get(\"lastName\"));",
							"});",
							"pm.test(\"Validate dependants\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"dependants\", parseInt(pm.environment.get(\"dependants\")));",
							"});",
							"pm.test(\"Validate salary, gross, benefitsCost, net\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"salary\").that.is.a(\"number\");",
							"    pm.expect(jsonData).to.have.property(\"gross\").that.is.a(\"number\");",
							"    pm.expect(jsonData).to.have.property(\"benefitsCost\").that.is.a(\"number\");",
							"    pm.expect(jsonData).to.have.property(\"net\").that.is.a(\"number\");",
							"});",
							"pm.test(\"Validate employee salary, gross, benefitsCost, and net calculations\", function () {",
							"    const employee = pm.response.json(); ",
							"    const expectedGross = 2000; ",
							"    const expectedSalary = 52000; ",
							"",
							"    const expectedBenefitsCost = (1000 + (employee.dependants * 500)) / 26;",
							"",
							"    const expectedNet = expectedGross - expectedBenefitsCost;",
							"",
							"    function roundToFive(value) {",
							"        return Math.round(value * 1e5) / 1e5;",
							"    }",
							"",
							"    const roundedExpectedBenefitsCost = roundToFive(expectedBenefitsCost);",
							"    const roundedExpectedNet = roundToFive(expectedNet);",
							"    const roundedActualBenefitsCost = roundToFive(employee.benefitsCost);",
							"    const roundedActualNet = roundToFive(employee.net);",
							"",
							"    pm.expect(employee.salary).to.eql(expectedSalary, `Expected Salary: ${expectedSalary}`);",
							"    pm.expect(employee.gross).to.eql(expectedGross, `Expected Gross: ${expectedGross}`);",
							"    pm.expect(roundedActualBenefitsCost).to.eql(roundedExpectedBenefitsCost, `Expected Benefits Cost: ${roundedExpectedBenefitsCost}, Actual: ${roundedActualBenefitsCost}`);",
							"    pm.expect(roundedActualNet).to.eql(roundedExpectedNet, `Expected Net Pay: ${roundedExpectedNet}, Actual: ${roundedActualNet}`);",
							"});",
							"",
							"",
							"",
							"pm.environment.set(\"employee_id\", jsonData.id);",
							"console.log(`Created employee with ID: ${jsonData.id}`);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"firstName\", \"Employee_\" + Math.floor(Math.random() * 1000));\r",
							"pm.environment.set(\"lastName\", \"Test_\" + Math.floor(Math.random() * 1000));\r",
							"pm.environment.set(\"dependants\", Math.floor(Math.random() * 20) + 1);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Basic {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"dependants\": {{dependants}}\n}\n"
				},
				"url": {
					"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
					"protocol": "https",
					"host": [
						"wmxrwq14uc",
						"execute-api",
						"us-east-1",
						"amazonaws",
						"com"
					],
					"path": [
						"Prod",
						"api",
						"employees"
					]
				}
			},
			"response": [
				{
					"name": "Add Employee",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"name": "Content-Type",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Natasha\",\n    \"lastName\": \"Romanoff\",\n    \"dependants\": 3\n}"
						},
						"url": {
							"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
							"protocol": "https",
							"host": [
								"wmxrwq14uc",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"Prod",
								"api",
								"employees"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "278"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Date",
							"value": "Mon, 03 Feb 2020 19:09:21 GMT"
						},
						{
							"key": "x-amzn-RequestId",
							"value": "3396c97b-999d-4f05-9a05-e703570f753e"
						},
						{
							"key": "x-amz-apigw-id",
							"value": "HVZrMGHHoAMFygA="
						},
						{
							"key": "X-Amzn-Trace-Id",
							"value": "Root=1-5e386fe1-6e06a18a49d85a67160a88a7;Sampled=0"
						},
						{
							"key": "X-Cache",
							"value": "Miss from cloudfront"
						},
						{
							"key": "Via",
							"value": "1.1 7b891ba5ffaf08dd209adf67026190db.cloudfront.net (CloudFront)"
						},
						{
							"key": "X-Amz-Cf-Pop",
							"value": "ORD52-C1"
						},
						{
							"key": "X-Amz-Cf-Id",
							"value": "nFIi5rL0BsEjX8yNyOIIgOTSBrAoosGndMNagg_yN3RMBGx-TQYmVA=="
						}
					],
					"cookie": [],
					"body": "{\n    \"partitionKey\": \"TestUser1\",\n    \"sortKey\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\n    \"username\": \"TestUser1\",\n    \"id\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\n    \"firstName\": \"Natasha\",\n    \"lastName\": \"Romanoff\",\n    \"dependants\": 3,\n    \"salary\": 52000,\n    \"gross\": 2000,\n    \"benefitsCost\": 96.1538544,\n    \"net\": 1903.84619\n}"
				}
			]
		},
		{
			"name": "Add second Employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Validate all fields\", function () {",
							"    const jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"string\");",
							"    pm.expect(jsonData).to.have.property(\"firstName\", pm.environment.get(\"firstName\"));",
							"    pm.expect(jsonData).to.have.property(\"lastName\", pm.environment.get(\"lastName\"));",
							"    pm.expect(jsonData).to.have.property(\"dependants\", parseInt(pm.environment.get(\"dependants\")));",
							"    pm.expect(jsonData).to.have.property(\"salary\").that.is.a(\"number\");",
							"    pm.expect(jsonData).to.have.property(\"gross\").that.is.a(\"number\");",
							"    pm.expect(jsonData).to.have.property(\"benefitsCost\").that.is.a(\"number\");",
							"    pm.expect(jsonData).to.have.property(\"net\").that.is.a(\"number\");",
							"});",
							"pm.test(\"Validate firstName\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"firstName\", pm.environment.get(\"firstName\"));",
							"});",
							"pm.test(\"Validate lastName\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"lastName\", pm.environment.get(\"lastName\"));",
							"});",
							"pm.test(\"Validate dependants\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"dependants\", parseInt(pm.environment.get(\"dependants\")));",
							"});",
							"pm.test(\"Validate salary, gross, benefitsCost, net\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"salary\").that.is.a(\"number\");",
							"    pm.expect(jsonData).to.have.property(\"gross\").that.is.a(\"number\");",
							"    pm.expect(jsonData).to.have.property(\"benefitsCost\").that.is.a(\"number\");",
							"    pm.expect(jsonData).to.have.property(\"net\").that.is.a(\"number\");",
							"});",
							"pm.test(\"Validate employee salary, gross, benefitsCost, and net calculations\", function () {",
							"    const employee = pm.response.json(); ",
							"    const expectedGross = 2000; ",
							"    const expectedSalary = 52000; ",
							"",
							"    const expectedBenefitsCost = ((1000 + (employee.dependants * 500)) / 26).toFixed(5); // Usamos 5 decimales",
							"",
							"    const expectedNet = (expectedGross - expectedBenefitsCost).toFixed(5);",
							"",
							"    pm.expect(employee.salary).to.eql(expectedSalary, `Expected Salary: ${expectedSalary}`);",
							"    pm.expect(employee.gross).to.eql(expectedGross, `Expected Gross: ${expectedGross}`);",
							"    pm.expect(employee.benefitsCost.toFixed(5)).to.eql(expectedBenefitsCost, `Expected Benefits Cost: ${expectedBenefitsCost}`);",
							"    pm.expect(employee.net.toFixed(5)).to.eql(expectedNet, `Expected Net Pay: ${expectedNet}`);",
							"});",
							"",
							"",
							"",
							"pm.environment.set(\"employee_id\", jsonData.id);",
							"console.log(`Created employee with ID: ${jsonData.id}`);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"firstName\", \"Employee_\" + Math.floor(Math.random() * 1000));\r",
							"pm.environment.set(\"lastName\", \"Test_\" + Math.floor(Math.random() * 1000));\r",
							"pm.environment.set(\"dependants\", Math.floor(Math.random() * 20) + 1);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Basic {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"dependants\": {{dependants}}\n}\n"
				},
				"url": {
					"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
					"protocol": "https",
					"host": [
						"wmxrwq14uc",
						"execute-api",
						"us-east-1",
						"amazonaws",
						"com"
					],
					"path": [
						"Prod",
						"api",
						"employees"
					]
				}
			},
			"response": [
				{
					"name": "Add Employee",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"name": "Content-Type",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Natasha\",\n    \"lastName\": \"Romanoff\",\n    \"dependants\": 3\n}"
						},
						"url": {
							"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
							"protocol": "https",
							"host": [
								"wmxrwq14uc",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"Prod",
								"api",
								"employees"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "278"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Date",
							"value": "Mon, 03 Feb 2020 19:09:21 GMT"
						},
						{
							"key": "x-amzn-RequestId",
							"value": "3396c97b-999d-4f05-9a05-e703570f753e"
						},
						{
							"key": "x-amz-apigw-id",
							"value": "HVZrMGHHoAMFygA="
						},
						{
							"key": "X-Amzn-Trace-Id",
							"value": "Root=1-5e386fe1-6e06a18a49d85a67160a88a7;Sampled=0"
						},
						{
							"key": "X-Cache",
							"value": "Miss from cloudfront"
						},
						{
							"key": "Via",
							"value": "1.1 7b891ba5ffaf08dd209adf67026190db.cloudfront.net (CloudFront)"
						},
						{
							"key": "X-Amz-Cf-Pop",
							"value": "ORD52-C1"
						},
						{
							"key": "X-Amz-Cf-Id",
							"value": "nFIi5rL0BsEjX8yNyOIIgOTSBrAoosGndMNagg_yN3RMBGx-TQYmVA=="
						}
					],
					"cookie": [],
					"body": "{\n    \"partitionKey\": \"TestUser1\",\n    \"sortKey\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\n    \"username\": \"TestUser1\",\n    \"id\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\n    \"firstName\": \"Natasha\",\n    \"lastName\": \"Romanoff\",\n    \"dependants\": 3,\n    \"salary\": 52000,\n    \"gross\": 2000,\n    \"benefitsCost\": 96.1538544,\n    \"net\": 1903.84619\n}"
				}
			]
		},
		{
			"name": "Get Employee List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Schema is valid\", function () {\r",
							"    const schema = {\r",
							"        \"type\": \"array\",\r",
							"        \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"id\": { \"type\": \"string\" },\r",
							"                \"firstName\": { \"type\": \"string\" },\r",
							"                \"lastName\": { \"type\": \"string\" },\r",
							"                \"dependants\": { \"type\": \"number\" },\r",
							"                \"salary\": { \"type\": \"number\" },\r",
							"                \"gross\": { \"type\": \"number\" },\r",
							"                \"benefitsCost\": { \"type\": \"number\" },\r",
							"                \"net\": { \"type\": \"number\" }\r",
							"            },\r",
							"            \"required\": [\"id\", \"firstName\", \"lastName\", \"dependants\", \"salary\", \"gross\", \"benefitsCost\", \"net\"]\r",
							"        }\r",
							"    };\r",
							"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
							"});\r",
							"pm.test(\"Response contains multiple employees\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"    pm.expect(jsonData.length).to.be.greaterThan(1);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
					"protocol": "https",
					"host": [
						"wmxrwq14uc",
						"execute-api",
						"us-east-1",
						"amazonaws",
						"com"
					],
					"path": [
						"Prod",
						"api",
						"employees"
					]
				}
			},
			"response": [
				{
					"name": "Get Employee List",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
							"protocol": "https",
							"host": [
								"wmxrwq14uc",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"Prod",
								"api",
								"employees"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "626"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Date",
							"value": "Mon, 03 Feb 2020 19:06:53 GMT"
						},
						{
							"key": "x-amzn-RequestId",
							"value": "e1b146c6-7a04-4a7b-96bd-380bb13d9a4e"
						},
						{
							"key": "x-amz-apigw-id",
							"value": "HVZUKE7XoAMF9zA="
						},
						{
							"key": "X-Amzn-Trace-Id",
							"value": "Root=1-5e386f4d-cac36a4413295f7df774bd58;Sampled=0"
						},
						{
							"key": "X-Cache",
							"value": "Miss from cloudfront"
						},
						{
							"key": "Via",
							"value": "1.1 7b891ba5ffaf08dd209adf67026190db.cloudfront.net (CloudFront)"
						},
						{
							"key": "X-Amz-Cf-Pop",
							"value": "ORD52-C1"
						},
						{
							"key": "X-Amz-Cf-Id",
							"value": "hSm_Jsqc_yaXsj2yELKp03K5oDWhSfeYrwgUh_hmlh0v1onUHQaqEQ=="
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"partitionKey\": \"TestUser1\",\n        \"sortKey\": \"15ab4884-e96c-4b4f-842c-6dd389033766\",\n        \"username\": \"TestUser1\",\n        \"id\": \"15ab4884-e96c-4b4f-842c-6dd389033766\",\n        \"firstName\": \"Steve\",\n        \"lastName\": \"Rogers\",\n        \"dependants\": 1,\n        \"expiration\": \"2020-02-23T17:41:07+00:00\",\n        \"salary\": 52000,\n        \"gross\": 2000,\n        \"benefitsCost\": 57.69231,\n        \"net\": 1942.30774\n    },\n    {\n        \"partitionKey\": \"TestUser1\",\n        \"sortKey\": \"ee4e35f4-bbe8-4905-afaa-48403c19c42e\",\n        \"username\": \"TestUser1\",\n        \"id\": \"ee4e35f4-bbe8-4905-afaa-48403c19c42e\",\n        \"firstName\": \"Tony\",\n        \"lastName\": \"Stark\",\n        \"dependants\": 2,\n        \"expiration\": \"2020-03-03T19:06:35+00:00\",\n        \"salary\": 52000,\n        \"gross\": 2000,\n        \"benefitsCost\": 76.92308,\n        \"net\": 1923.0769\n    }\n]"
				}
			]
		},
		{
			"name": "Get Employee List with no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic {{token}}",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
					"protocol": "https",
					"host": [
						"wmxrwq14uc",
						"execute-api",
						"us-east-1",
						"amazonaws",
						"com"
					],
					"path": [
						"Prod",
						"api",
						"employees"
					]
				}
			},
			"response": [
				{
					"name": "Get Employee List",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
							"protocol": "https",
							"host": [
								"wmxrwq14uc",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"Prod",
								"api",
								"employees"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "626"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Date",
							"value": "Mon, 03 Feb 2020 19:06:53 GMT"
						},
						{
							"key": "x-amzn-RequestId",
							"value": "e1b146c6-7a04-4a7b-96bd-380bb13d9a4e"
						},
						{
							"key": "x-amz-apigw-id",
							"value": "HVZUKE7XoAMF9zA="
						},
						{
							"key": "X-Amzn-Trace-Id",
							"value": "Root=1-5e386f4d-cac36a4413295f7df774bd58;Sampled=0"
						},
						{
							"key": "X-Cache",
							"value": "Miss from cloudfront"
						},
						{
							"key": "Via",
							"value": "1.1 7b891ba5ffaf08dd209adf67026190db.cloudfront.net (CloudFront)"
						},
						{
							"key": "X-Amz-Cf-Pop",
							"value": "ORD52-C1"
						},
						{
							"key": "X-Amz-Cf-Id",
							"value": "hSm_Jsqc_yaXsj2yELKp03K5oDWhSfeYrwgUh_hmlh0v1onUHQaqEQ=="
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"partitionKey\": \"TestUser1\",\n        \"sortKey\": \"15ab4884-e96c-4b4f-842c-6dd389033766\",\n        \"username\": \"TestUser1\",\n        \"id\": \"15ab4884-e96c-4b4f-842c-6dd389033766\",\n        \"firstName\": \"Steve\",\n        \"lastName\": \"Rogers\",\n        \"dependants\": 1,\n        \"expiration\": \"2020-02-23T17:41:07+00:00\",\n        \"salary\": 52000,\n        \"gross\": 2000,\n        \"benefitsCost\": 57.69231,\n        \"net\": 1942.30774\n    },\n    {\n        \"partitionKey\": \"TestUser1\",\n        \"sortKey\": \"ee4e35f4-bbe8-4905-afaa-48403c19c42e\",\n        \"username\": \"TestUser1\",\n        \"id\": \"ee4e35f4-bbe8-4905-afaa-48403c19c42e\",\n        \"firstName\": \"Tony\",\n        \"lastName\": \"Stark\",\n        \"dependants\": 2,\n        \"expiration\": \"2020-03-03T19:06:35+00:00\",\n        \"salary\": 52000,\n        \"gross\": 2000,\n        \"benefitsCost\": 76.92308,\n        \"net\": 1923.0769\n    }\n]"
				}
			]
		},
		{
			"name": "Get Employee List with invalid token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
					"protocol": "https",
					"host": [
						"wmxrwq14uc",
						"execute-api",
						"us-east-1",
						"amazonaws",
						"com"
					],
					"path": [
						"Prod",
						"api",
						"employees"
					]
				}
			},
			"response": [
				{
					"name": "Get Employee List",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
							"protocol": "https",
							"host": [
								"wmxrwq14uc",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"Prod",
								"api",
								"employees"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "626"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Date",
							"value": "Mon, 03 Feb 2020 19:06:53 GMT"
						},
						{
							"key": "x-amzn-RequestId",
							"value": "e1b146c6-7a04-4a7b-96bd-380bb13d9a4e"
						},
						{
							"key": "x-amz-apigw-id",
							"value": "HVZUKE7XoAMF9zA="
						},
						{
							"key": "X-Amzn-Trace-Id",
							"value": "Root=1-5e386f4d-cac36a4413295f7df774bd58;Sampled=0"
						},
						{
							"key": "X-Cache",
							"value": "Miss from cloudfront"
						},
						{
							"key": "Via",
							"value": "1.1 7b891ba5ffaf08dd209adf67026190db.cloudfront.net (CloudFront)"
						},
						{
							"key": "X-Amz-Cf-Pop",
							"value": "ORD52-C1"
						},
						{
							"key": "X-Amz-Cf-Id",
							"value": "hSm_Jsqc_yaXsj2yELKp03K5oDWhSfeYrwgUh_hmlh0v1onUHQaqEQ=="
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"partitionKey\": \"TestUser1\",\n        \"sortKey\": \"15ab4884-e96c-4b4f-842c-6dd389033766\",\n        \"username\": \"TestUser1\",\n        \"id\": \"15ab4884-e96c-4b4f-842c-6dd389033766\",\n        \"firstName\": \"Steve\",\n        \"lastName\": \"Rogers\",\n        \"dependants\": 1,\n        \"expiration\": \"2020-02-23T17:41:07+00:00\",\n        \"salary\": 52000,\n        \"gross\": 2000,\n        \"benefitsCost\": 57.69231,\n        \"net\": 1942.30774\n    },\n    {\n        \"partitionKey\": \"TestUser1\",\n        \"sortKey\": \"ee4e35f4-bbe8-4905-afaa-48403c19c42e\",\n        \"username\": \"TestUser1\",\n        \"id\": \"ee4e35f4-bbe8-4905-afaa-48403c19c42e\",\n        \"firstName\": \"Tony\",\n        \"lastName\": \"Stark\",\n        \"dependants\": 2,\n        \"expiration\": \"2020-03-03T19:06:35+00:00\",\n        \"salary\": 52000,\n        \"gross\": 2000,\n        \"benefitsCost\": 76.92308,\n        \"net\": 1923.0769\n    }\n]"
				}
			]
		},
		{
			"name": "Get Employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Correct employee id is returned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"employee_id\"));",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic {{token}}"
					}
				],
				"url": {
					"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees/{{employee_id}}",
					"protocol": "https",
					"host": [
						"wmxrwq14uc",
						"execute-api",
						"us-east-1",
						"amazonaws",
						"com"
					],
					"path": [
						"Prod",
						"api",
						"employees",
						"{{employee_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Get Employee",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees/{{id}}",
							"protocol": "https",
							"host": [
								"wmxrwq14uc",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"Prod",
								"api",
								"employees",
								"{{id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "319"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Date",
							"value": "Mon, 03 Feb 2020 19:10:22 GMT"
						},
						{
							"key": "x-amzn-RequestId",
							"value": "bf18fb76-80d3-4528-a665-5043bf59f85f"
						},
						{
							"key": "x-amz-apigw-id",
							"value": "HVZ0tHDPoAMFXnA="
						},
						{
							"key": "X-Amzn-Trace-Id",
							"value": "Root=1-5e38701e-9141e79093a7e70db2994c31;Sampled=0"
						},
						{
							"key": "X-Cache",
							"value": "Miss from cloudfront"
						},
						{
							"key": "Via",
							"value": "1.1 7b891ba5ffaf08dd209adf67026190db.cloudfront.net (CloudFront)"
						},
						{
							"key": "X-Amz-Cf-Pop",
							"value": "ORD52-C1"
						},
						{
							"key": "X-Amz-Cf-Id",
							"value": "lrYWY_SO_d8jw6OeCucWpEiCGR4Mwb9BCRHlXXw-9fcWfxq4nvk39Q=="
						}
					],
					"cookie": [],
					"body": "{\n    \"partitionKey\": \"TestUser1\",\n    \"sortKey\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\n    \"username\": \"TestUser1\",\n    \"id\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\n    \"firstName\": \"Natasha\",\n    \"lastName\": \"Romanoff\",\n    \"dependants\": 3,\n    \"expiration\": \"2020-03-03T19:09:21+00:00\",\n    \"salary\": 52000,\n    \"gross\": 2000,\n    \"benefitsCost\": 96.1538544,\n    \"net\": 1903.84619\n}"
				}
			]
		},
		{
			"name": "Update Employee",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.sendRequest({\r",
							"    url: \"https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees\",\r",
							"    method: \"GET\",\r",
							"    header: {\r",
							"        Authorization: \"Basic VGVzdFVzZXI3MTc6bFI4eG4tPm15UFA9\" \r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err || !res.json().length) {\r",
							"        console.error(\"No se encontraron empleados o ocurrió un error:\", err);\r",
							"        postman.setNextRequest(null); \r",
							"    } else {\r",
							"    \r",
							"        const firstEmployee = res.json()[0]; \r",
							"\r",
							"        pm.environment.set(\"employee_id\", firstEmployee.id); \r",
							"        pm.environment.set(\"firstName\", firstEmployee.firstName); \r",
							"        pm.environment.set(\"lastName\", firstEmployee.lastName); \r",
							"        pm.environment.set(\"dependants\", firstEmployee.dependants); \r",
							"\r",
							"        pm.environment.set(\"newFirstName\", \"Updated_\" + Math.floor(Math.random() * 1000)); \r",
							"        pm.environment.set(\"newLastName\", \"Name_\" + Math.floor(Math.random() * 1000)); \r",
							"        pm.environment.set(\"newDependants\", Math.floor(Math.random() * 20) + 1); \r",
							"\r",
							"        console.log(`Empleado actualizado: ${firstEmployee.firstName} ${firstEmployee.lastName}, dependants: ${firstEmployee.dependants}`);\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que los datos del empleado se actualizaron correctamente\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"employee_id\"));\r",
							"    pm.expect(jsonData.firstName).to.eql(pm.environment.get(\"newFirstName\"));\r",
							"    pm.expect(jsonData.lastName).to.eql(pm.environment.get(\"newLastName\"));\r",
							"    pm.expect(jsonData.dependants).to.eql(parseInt(pm.environment.get(\"newDependants\")));\r",
							"});\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: \"https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees/{{employee_id}}\",\r",
							"    method: \"GET\",\r",
							"    header: {\r",
							"        Authorization: \"Basic VGVzdFVzZXI3MTc6bFI4eG4tPm15UFA9\" \r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.error(\"Error al obtener el empleado actualizado:\", err);\r",
							"    } else {\r",
							"        const updatedEmployee = res.json();\r",
							"        \r",
							"        pm.test(\"Validar que los datos del empleado actualizado son correctos\", function () {\r",
							"            pm.expect(updatedEmployee.firstName).to.eql(pm.environment.get(\"newFirstName\"));\r",
							"            pm.expect(updatedEmployee.lastName).to.eql(pm.environment.get(\"newLastName\"));\r",
							"            pm.expect(updatedEmployee.dependants).to.eql(parseInt(pm.environment.get(\"newDependants\")));\r",
							"        });\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: \"https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees\",\r",
							"    method: \"GET\",\r",
							"    header: {\r",
							"        Authorization: \"Basic VGVzdFVzZXI3MTc6bFI4eG4tPm15UFA9\" \r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.error(\"Error al obtener la lista de empleados:\", err);\r",
							"    } else {\r",
							"        const allEmployees = res.json();\r",
							"        const updatedEmployee = allEmployees.find(emp => emp.id === pm.environment.get(\"employee_id\"));\r",
							"\r",
							"        pm.test(\"Validar que el cambio está reflejado en la lista de empleados\", function () {\r",
							"            pm.expect(updatedEmployee.firstName).to.eql(pm.environment.get(\"newFirstName\"));\r",
							"            pm.expect(updatedEmployee.lastName).to.eql(pm.environment.get(\"newLastName\"));\r",
							"            pm.expect(updatedEmployee.dependants).to.eql(parseInt(pm.environment.get(\"newDependants\")));\r",
							"        });\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Basic {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{employee_id}}\",  \r\n    \"firstName\": \"{{newFirstName}}\",  \r\n    \"lastName\": \"{{newLastName}}\",  \r\n    \"dependants\": {{newDependants}}   \r\n}"
				},
				"url": {
					"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
					"protocol": "https",
					"host": [
						"wmxrwq14uc",
						"execute-api",
						"us-east-1",
						"amazonaws",
						"com"
					],
					"path": [
						"Prod",
						"api",
						"employees"
					]
				}
			},
			"response": [
				{
					"name": "Update Employee",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\r\n    \"firstName\": \"Wanda\",\r\n    \"lastName\": \"Maximoff\",\r\n    \"dependants\": 2\r\n}"
						},
						"url": {
							"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
							"protocol": "https",
							"host": [
								"wmxrwq14uc",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"Prod",
								"api",
								"employees"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "273"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Date",
							"value": "Mon, 03 Feb 2020 19:12:29 GMT"
						},
						{
							"key": "x-amzn-RequestId",
							"value": "b3f07a0a-aba4-48e4-9855-2b6fc99920e3"
						},
						{
							"key": "x-amz-apigw-id",
							"value": "HVaIhGR9IAMFZgw="
						},
						{
							"key": "X-Amzn-Trace-Id",
							"value": "Root=1-5e38709c-30cd94066950169ffcb7b740;Sampled=0"
						},
						{
							"key": "X-Cache",
							"value": "Miss from cloudfront"
						},
						{
							"key": "Via",
							"value": "1.1 7b891ba5ffaf08dd209adf67026190db.cloudfront.net (CloudFront)"
						},
						{
							"key": "X-Amz-Cf-Pop",
							"value": "ORD52-C1"
						},
						{
							"key": "X-Amz-Cf-Id",
							"value": "aFTv25JDJ9ReKZpm8rSalwgyZ3wvDFHd39pTnfc_isJNtJ9H4qXnXw=="
						}
					],
					"cookie": [],
					"body": "{\n    \"partitionKey\": \"TestUser1\",\n    \"sortKey\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\n    \"username\": \"TestUser1\",\n    \"id\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\n    \"firstName\": \"Wanda\",\n    \"lastName\": \"Maximoff\",\n    \"dependants\": 2,\n    \"salary\": 52000,\n    \"gross\": 2000,\n    \"benefitsCost\": 76.92308,\n    \"net\": 1923.0769\n}"
				}
			]
		},
		{
			"name": "Delete Employee",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.sendRequest({\r",
							"    url: \"https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees\",\r",
							"    method: \"GET\",\r",
							"    header: {\r",
							"        Authorization: \"Basic VGVzdFVzZXI3MTc6bFI4eG4tPm15UFA9\" \r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err || !res.json().length) {\r",
							"        console.error(\"No employees found or error occurred:\", err);\r",
							"        postman.setNextRequest(null); \r",
							"    } else {\r",
							"        const firstEmployee = res.json()[0];\r",
							"        pm.environment.set(\"employee_id\", firstEmployee.id);\r",
							"        console.log(`Employee to delete: ${firstEmployee.id}`);\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Employee deleted successfully\", function () {\r",
							"    pm.response.to.have.status(200); \r",
							"   // console.log(`Deleted Employee ID: ${pm.environment.get(\"employee_id\")}`);\r",
							"});\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: \"https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees\",\r",
							"    method: \"GET\",\r",
							"    header: {\r",
							"        Authorization: \"Basic VGVzdFVzZXI3MTc6bFI4eG4tPm15UFA9\" \r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.error(\"Error fetching updated employee list:\", err);\r",
							"        pm.expect.fail(\"Failed to fetch the updated employee list.\");\r",
							"    } else {\r",
							"        const updatedList = res.json();\r",
							"        console.log(\"Updated Employee List:\", updatedList);\r",
							"\r",
							"        pm.test(\"Validate Employee Deletion\", function () {\r",
							"            const deletedId = pm.environment.get(\"employee_id\");\r",
							"            const isDeleted = !updatedList.some(emp => emp.id === deletedId);\r",
							"            pm.expect(isDeleted).to.be.true; \r",
							"            console.log(`Validation complete. Employee ${deletedId} is no longer in the list.`);\r",
							"        });\r",
							"    }\r",
							"});\r",
							"pm.test(\"Validate GET request for deleted employee\", function () {\r",
							"    pm.response.to.have.status(404); \r",
							"    const responseBody = pm.response.json();\r",
							"    console.log(\"Response body for deleted employee:\", responseBody);\r",
							"\r",
							"\r",
							"});\r",
							"pm.test(\"Response is empty or null for deleted employee\", function () {\r",
							"        pm.expect(responseBody).to.be.oneOf(['', null]); \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{Username}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{Password}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic VGVzdFVzZXI3MTc6bFI4eG4tPm15UFA9",
						"type": "text"
					},
					{
						"key": "",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees/{{employee_id}}",
					"protocol": "https",
					"host": [
						"wmxrwq14uc",
						"execute-api",
						"us-east-1",
						"amazonaws",
						"com"
					],
					"path": [
						"Prod",
						"api",
						"employees",
						"{{employee_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Delete Employee",
					"originalRequest": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees/{{id}}",
							"protocol": "https",
							"host": [
								"wmxrwq14uc",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"Prod",
								"api",
								"employees",
								"{{id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Content-Length",
							"value": "0"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Date",
							"value": "Mon, 03 Feb 2020 19:13:30 GMT"
						},
						{
							"key": "x-amzn-RequestId",
							"value": "9bc8a4a9-6860-4fea-8d16-e49c291b1d86"
						},
						{
							"key": "x-amz-apigw-id",
							"value": "HVaSIHvFIAMFkCg="
						},
						{
							"key": "X-Amzn-Trace-Id",
							"value": "Root=1-5e3870da-ab5c33d01cc1ff705e9da8a0;Sampled=0"
						},
						{
							"key": "X-Cache",
							"value": "Miss from cloudfront"
						},
						{
							"key": "Via",
							"value": "1.1 7b891ba5ffaf08dd209adf67026190db.cloudfront.net (CloudFront)"
						},
						{
							"key": "X-Amz-Cf-Pop",
							"value": "ORD52-C1"
						},
						{
							"key": "X-Amz-Cf-Id",
							"value": "pr-VjFpfZKGE1FX_OZ9wEbNuPjPBwCOk1AZqg4X54cI-b_Q2MtGVVA=="
						}
					],
					"cookie": [],
					"body": "    "
				}
			]
		},
		{
			"name": "Update Employee Invalid ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.unset(\"employee_ids\");\r",
							"pm.environment.unset(\"current_employee_id\");\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: \"https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees\",\r",
							"    method: \"GET\",\r",
							"    header: {\r",
							"        Authorization: `Basic ${pm.environment.get(\"token\")}`\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.error(\"Error fetching employee list:\", err);\r",
							"    } else {\r",
							"        const employees = res.json();\r",
							"        if (employees.length > 0) {\r",
							"            console.log(`Found ${employees.length} employees. Starting deletion process...`);\r",
							"            \r",
							"            const employeeIds = employees.map(emp => emp.id);\r",
							"            pm.environment.set(\"employee_ids\", JSON.stringify(employeeIds));\r",
							"        } else {\r",
							"            console.log(\"No employees found to delete.\");\r",
							"        }\r",
							"    }\r",
							"});\r",
							"\r",
							"const randomId = Math.floor(Math.random() * 100000);\r",
							"pm.environment.set(\"current_employee_id\", randomId);\r",
							"console.log(`Generated Random ID: ${randomId}`);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 405\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 405]);\r",
							"    console.log(`Status code is: ${pm.response.code}`);\r",
							"});\r",
							"\r",
							"console.log(\"Response Body:\", pm.response.text());\r",
							"\r",
							"if (pm.response.code === 200) {\r",
							"    pm.test(\"Response is a valid JSON\", function () {\r",
							"        pm.response.to.be.json;\r",
							"    });\r",
							"\r",
							"    let responseData;\r",
							"    try {\r",
							"        responseData = pm.response.json();\r",
							"        console.log(\"Parsed Response JSON:\", responseData);\r",
							"\r",
							"        pm.test(\"Response has required fields\", function () {\r",
							"            pm.expect(responseData).to.have.property(\"id\");\r",
							"            pm.expect(responseData).to.have.property(\"name\");\r",
							"            pm.expect(responseData).to.have.property(\"position\");\r",
							"        });\r",
							"    } catch (e) {\r",
							"        console.error(\"Failed to parse response JSON:\", e.message);\r",
							"        pm.test(\"Response is not valid JSON\", function () {\r",
							"            pm.expect.fail(\"The response is not valid JSON\");\r",
							"        });\r",
							"    }\r",
							"} else if (pm.response.code === 405) {\r",
							"    pm.test(\"Response indicates an invalid ID (405)\", function () {\r",
							"        console.log(\"Received 405: ID does not exist or action not allowed.\");\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{Password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{Username}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Basic {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{current_employee_id}}\",  \r\n    \"firstName\": \"{{newFirstName}}\",  \r\n    \"lastName\": \"{{newLastName}}\",  \r\n    \"dependants\": {{newDependants}}  \r\n}"
				},
				"url": {
					"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
					"protocol": "https",
					"host": [
						"wmxrwq14uc",
						"execute-api",
						"us-east-1",
						"amazonaws",
						"com"
					],
					"path": [
						"Prod",
						"api",
						"employees"
					]
				}
			},
			"response": [
				{
					"name": "Update Employee",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\r\n    \"firstName\": \"Wanda\",\r\n    \"lastName\": \"Maximoff\",\r\n    \"dependants\": 2\r\n}"
						},
						"url": {
							"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
							"protocol": "https",
							"host": [
								"wmxrwq14uc",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"Prod",
								"api",
								"employees"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "273"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Date",
							"value": "Mon, 03 Feb 2020 19:12:29 GMT"
						},
						{
							"key": "x-amzn-RequestId",
							"value": "b3f07a0a-aba4-48e4-9855-2b6fc99920e3"
						},
						{
							"key": "x-amz-apigw-id",
							"value": "HVaIhGR9IAMFZgw="
						},
						{
							"key": "X-Amzn-Trace-Id",
							"value": "Root=1-5e38709c-30cd94066950169ffcb7b740;Sampled=0"
						},
						{
							"key": "X-Cache",
							"value": "Miss from cloudfront"
						},
						{
							"key": "Via",
							"value": "1.1 7b891ba5ffaf08dd209adf67026190db.cloudfront.net (CloudFront)"
						},
						{
							"key": "X-Amz-Cf-Pop",
							"value": "ORD52-C1"
						},
						{
							"key": "X-Amz-Cf-Id",
							"value": "aFTv25JDJ9ReKZpm8rSalwgyZ3wvDFHd39pTnfc_isJNtJ9H4qXnXw=="
						}
					],
					"cookie": [],
					"body": "{\n    \"partitionKey\": \"TestUser1\",\n    \"sortKey\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\n    \"username\": \"TestUser1\",\n    \"id\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\n    \"firstName\": \"Wanda\",\n    \"lastName\": \"Maximoff\",\n    \"dependants\": 2,\n    \"salary\": 52000,\n    \"gross\": 2000,\n    \"benefitsCost\": 76.92308,\n    \"net\": 1923.0769\n}"
				}
			]
		},
		{
			"name": "Get Employee List validate empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const employees = pm.response.json();\r",
							"\r",
							"pm.test(\"All employees deleted, list is empty\", function () {\r",
							"    pm.expect(employees).to.be.an(\"array\").that.is.empty;\r",
							"});\r",
							"\r",
							"if (employees.length === 0) {\r",
							"    console.log(\"Validation successful: All employees have been deleted.\");\r",
							"} else {\r",
							"    console.warn(`Validation failed: ${employees.length} employees still exist.`);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.unset(\"employee_ids\");\r",
							"pm.environment.unset(\"current_employee_id\");\r",
							"pm.sendRequest({\r",
							"    url: \"https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees\",\r",
							"    method: \"GET\",\r",
							"    header: {\r",
							"        Authorization: `Basic ${pm.environment.get(\"token\")}`\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.error(\"Error fetching employee list:\", err);\r",
							"        postman.setNextRequest(null); \r",
							"    } else {\r",
							"        const employees = res.json();\r",
							"        if (employees.length > 0) {\r",
							"            console.log(`Found ${employees.length} employees. Starting deletion process...`);\r",
							"\r",
							"            employees.forEach(employee => {\r",
							"                pm.sendRequest({\r",
							"                    url: `https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees/${employee.id}`,\r",
							"                    method: \"DELETE\",\r",
							"                    header: {\r",
							"                        Authorization: `Basic ${pm.environment.get(\"token\")}`\r",
							"                    }\r",
							"                }, function (err, res) {\r",
							"                    if (err) {\r",
							"                        console.error(`Failed to delete employee with ID: ${employee.id}`, err);\r",
							"                    } else {\r",
							"                        console.log(`Deleted Employee ID: ${employee.id}`);\r",
							"                    }\r",
							"                });\r",
							"            });\r",
							"        } else {\r",
							"            console.log(\"No employees found to delete.\");\r",
							"        }\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
					"protocol": "https",
					"host": [
						"wmxrwq14uc",
						"execute-api",
						"us-east-1",
						"amazonaws",
						"com"
					],
					"path": [
						"Prod",
						"api",
						"employees"
					]
				}
			},
			"response": [
				{
					"name": "Get Employee List",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
							"protocol": "https",
							"host": [
								"wmxrwq14uc",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"Prod",
								"api",
								"employees"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "626"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Date",
							"value": "Mon, 03 Feb 2020 19:06:53 GMT"
						},
						{
							"key": "x-amzn-RequestId",
							"value": "e1b146c6-7a04-4a7b-96bd-380bb13d9a4e"
						},
						{
							"key": "x-amz-apigw-id",
							"value": "HVZUKE7XoAMF9zA="
						},
						{
							"key": "X-Amzn-Trace-Id",
							"value": "Root=1-5e386f4d-cac36a4413295f7df774bd58;Sampled=0"
						},
						{
							"key": "X-Cache",
							"value": "Miss from cloudfront"
						},
						{
							"key": "Via",
							"value": "1.1 7b891ba5ffaf08dd209adf67026190db.cloudfront.net (CloudFront)"
						},
						{
							"key": "X-Amz-Cf-Pop",
							"value": "ORD52-C1"
						},
						{
							"key": "X-Amz-Cf-Id",
							"value": "hSm_Jsqc_yaXsj2yELKp03K5oDWhSfeYrwgUh_hmlh0v1onUHQaqEQ=="
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"partitionKey\": \"TestUser1\",\n        \"sortKey\": \"15ab4884-e96c-4b4f-842c-6dd389033766\",\n        \"username\": \"TestUser1\",\n        \"id\": \"15ab4884-e96c-4b4f-842c-6dd389033766\",\n        \"firstName\": \"Steve\",\n        \"lastName\": \"Rogers\",\n        \"dependants\": 1,\n        \"expiration\": \"2020-02-23T17:41:07+00:00\",\n        \"salary\": 52000,\n        \"gross\": 2000,\n        \"benefitsCost\": 57.69231,\n        \"net\": 1942.30774\n    },\n    {\n        \"partitionKey\": \"TestUser1\",\n        \"sortKey\": \"ee4e35f4-bbe8-4905-afaa-48403c19c42e\",\n        \"username\": \"TestUser1\",\n        \"id\": \"ee4e35f4-bbe8-4905-afaa-48403c19c42e\",\n        \"firstName\": \"Tony\",\n        \"lastName\": \"Stark\",\n        \"dependants\": 2,\n        \"expiration\": \"2020-03-03T19:06:35+00:00\",\n        \"salary\": 52000,\n        \"gross\": 2000,\n        \"benefitsCost\": 76.92308,\n        \"net\": 1923.0769\n    }\n]"
				}
			]
		}
	]
}